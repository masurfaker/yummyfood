const form = document.getElementById("orderForm");
const popup = document.getElementById("popup");
const popupMessage = document.getElementById("popup-message");

function closePopup() {
  popup.classList.add("hidden");
}

form.addEventListener("submit", async function (e) {
  e.preventDefault();

  const name = form.elements["name"].value.trim();
  const phone = form.elements["phone"].value.trim();

  if (!name || !phone) {
    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω.");
    return;
  }

  const selectedDishes = document.querySelectorAll(".dish");
  const orderItems = [];
  let totalK = 0, totalB = 0, totalJ = 0, totalU = 0;

  selectedDishes.forEach((dish) => {
    const qty = parseInt(dish.querySelector(".qty").value);
    if (qty > 0) {
      const name = dish.querySelector(".dish-name").textContent.trim();
      const kbjuRaw = dish.querySelector(".kbju").dataset.kbju.split("/").map(x => parseFloat(x));

      totalK += kbjuRaw[0] * qty;
      totalB += kbjuRaw[1] * qty;
      totalJ += kbjuRaw[2] * qty;
      totalU += kbjuRaw[3] * qty;

      orderItems.push(`${name} ‚Äî ${qty} —à—Ç.`);
    }
  });

  if (orderItems.length === 0) {
    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –±–ª—é–¥–æ.");
    return;
  }

  const kbjuTotal = [
    Math.round(totalK),
    Math.round(totalB),
    Math.round(totalJ),
    Math.round(totalU),
  ];

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Web3Forms
  const formData = new FormData();
  formData.append("access_key", "14d92358-9b7a-4e16-b2a7-35e9ed71de43");
  formData.append("name", name);
  formData.append("phone", phone);
  formData.append("order", orderItems.join("\n"));
  formData.append("kbju", kbjuTotal.join(" / "));

  try {
    await fetch("https://api.web3forms.com/submit", {
      method: "POST",
      body: formData
    });
  } catch (error) {
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –ø–æ—á—Ç—É.");
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
  const token = "8472899454:AAGiebKRLt6VMei4toaiW11bR2tIACuSFeo";
  const chat_id = "7408180116";
  const message = `
<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ YUMMY</b>
üë§ –ò–º—è: ${name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}

üßæ –ó–∞–∫–∞–∑:
${orderItems.map((item, i) => `${i + 1}. ${item}`).join("\n")}

–ö/–ë/–ñ/–£: ${kbjuTotal.join(" / ")}
`;

  try {
    await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id,
        text: message,
        parse_mode: "HTML"
      })
    });
  } catch (error) {
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram.");
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è popup
  const orderHTML = `
    <ul style="padding-left: 20px; margin: 0;">
      ${orderItems.map(item => `<li>${item}</li>`).join("")}
    </ul>
    <div style="margin-top: 10px;">–ö/–ë/–ñ/–£: ${kbjuTotal.join(" / ")}</div>
  `;

  popupMessage.innerHTML = `
    <div style="font-family:Arial;font-size:16px;">
      <div><b>${name}</b>!</div>
      <div style="margin-top:6px;">–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</div>
      <div style="margin:14px 0 6px;">–í–∞—à –∑–∞–∫–∞–∑:</div>
      ${orderHTML}
      <div style="margin-top:16px;">–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.<br>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ YUMMY!</div>
      <button id="close-popup" style="margin-top:14px;">–ó–∞–∫—Ä—ã—Ç—å</button>
    </div>
  `;

  popup.classList.remove("hidden");

  document.getElementById("close-popup").addEventListener("click", closePopup);
});